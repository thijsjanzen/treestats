[{"name":"app.R","content":"#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    https://shiny.posit.co/\n#\nlibrary(ape)\nlibrary(ggplot2)\nlibrary(shiny)\nlibrary(nlme)\n\ntree_data <- read.table(\"https://raw.githubusercontent.com/thijsjanzen/treestats/shiny2/data/emp_stats.txt\",\n                        header = TRUE)\navailable_stats <- colnames(tree_data)[2:55]\n\nphy_tree <- ape::read.tree(\"https://raw.githubusercontent.com/thijsjanzen/treestats/shiny2/data/phy_tree.txt\")\n\nsim_data <- read.table(\"https://raw.githubusercontent.com/thijsjanzen/treestats/shiny2/data/sim_stats.txt\",\n                       header = TRUE)\n\n\n\n\nsidebarPanel2 <- function(..., out = NULL, width = 4)\n{\n  div(class = paste0(\"col-sm-\", width),\n      tags$form(class = \"well\", ...),\n      out\n  )\n}\n\n\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n  # Application title\n  titlePanel(\"Comparison of tree statistics\"),\n\n  # Sidebar with a slider input for number of bins\n  sidebarLayout(\n    sidebarPanel2(\n                                selectInput(inputId = \"x_axis\",\n                                           label = \"Statistic1\",\n                                           selected = \"colless\",\n                                           choices = sort(available_stats)),\n                               selectInput(inputId = \"y_axis\",\n                                           label = \"Statistic2\",\n                                           selected = \"sackin\",\n                                           choices = sort(available_stats)),\n                               selectInput(inputId = \"coloring\",\n                                           label = \"Coloring\",\n                                           choices = c(\"None\", \"Size\", \"Taxonomic group\")),\n      out = HTML('This Shiny app provides a means to explore the found correlations in <a href =https://doi.org/10.1101/2024.01.24.576848>Janzen 2024<\/a>. Empirical correlations are based on 215 Empirical trees from <a href = https://doi-org.proxy-ub.rug.nl/10.1111/ele.13382>Condamine et al. 2019<\/a>. Simulated data shown is a random subset of 500 trees per diversification model, see the original paper for results using a much larger dataset. <br><br>\n              There are three types of plots available: <br>\n                1) Raw correlations, without correction. <br>\n                2) Residual correlations, corrected for tree size and phylogenetic relatedness. <br>\n                3) Correlations on simulated data, trees were simulated with fixed size using four different diversification models.')\n    ),\n\n    # Show a plot of the generated distribution\n    mainPanel(\n      tabsetPanel(type = \"tabs\", id = \"tabs1\",\n        tabPanel(\"Empirical data: Raw values\", value = 1, plotOutput(\"distPlot\")),\n        tabPanel(\"Empirical data: Residuals\",  value = 2, plotOutput(\"corPlot\")),\n        tabPanel(\"Simulated data\", value = 3, plotOutput(\"simPlot\"))\n      ),\n\n    )\n\n  )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n\n  output$distPlot <- renderPlot({\n    x <- tree_data[which(colnames(tree_data) == input$x_axis)]\n    y <- tree_data[which(colnames(tree_data) == input$y_axis)]\n    s <- tree_data$number_of_lineages\n    tt <- tree_data$Taxa\n\n    to_plot <- cbind(x, y, s, tt)\n\n    colnames(to_plot) <- c(\"x\", \"y\", \"Tree Size\", \"Taxa\")\n    local_cor <- paste0(\"Pearson correlation = \", round(cor(x, y), 2))\n\n    if (input$coloring == \"Size\") {\n      p1 <- ggplot(to_plot, aes(x = x, y = y, col = (`Tree Size`))) +\n        geom_point(size = 2) +\n        scale_color_viridis_c(option = \"C\") +\n        stat_smooth(method = \"lm\", col = \"#416894\", fill = \"#416894\") +\n        xlab(input$x_axis) +\n        ylab(input$y_axis) +\n        theme_classic() +\n        labs(col = \"Tree Size\") +\n        ggtitle(local_cor) +\n        theme(legend.text = element_text(size=14),\n              legend.title = element_text(size=16),\n              axis.title.x = element_text(size=16),\n              axis.title.y = element_text(size=16),\n              plot.title = element_text(size = 16, face = \"bold\"))\n    }\n    if (input$coloring == \"None\") {\n      p1 <- ggplot(to_plot, aes(x = x, y = y)) +\n        geom_point(col = \"#416894\", size = 2) +\n        stat_smooth(method = \"lm\", col = \"#416894\", fill = \"#416894\") +\n        xlab(input$x_axis) +\n        ylab(input$y_axis) +\n        theme_classic() +\n        ggtitle(local_cor) +\n        theme(legend.position = \"none\") +\n        theme(legend.text = element_text(size=14),\n              legend.title = element_text(size=16),\n              axis.title.x = element_text(size=16),\n              axis.title.y = element_text(size=16),\n              plot.title = element_text(size = 16, face = \"bold\"))\n    }\n    if (input$coloring == \"Taxonomic group\") {\n      p1 <- ggplot(to_plot, aes(x = x, y = y, col = Taxa)) +\n        geom_point(size = 2) +\n        stat_smooth(method = \"lm\", col = \"#416894\", fill = \"#416894\") +\n        scale_color_brewer(type = \"div\", palette = 3) +\n        xlab(input$x_axis) +\n        ylab(input$y_axis) +\n        theme_classic() +\n        ggtitle(local_cor) +\n        labs(col = \"Taxonomic\\nGroup\") +\n        theme(legend.text = element_text(size=14),\n              legend.title = element_text(size=16),\n              axis.title.x = element_text(size=16),\n              axis.title.y = element_text(size=16),\n              plot.title = element_text(size = 16, face = \"bold\")) +\n        guides(colour = guide_legend(override.aes = list(size=3)))\n    }\n\n    p1\n  })\n\n  output$corPlot <- renderPlot({\n    x <- unlist(tree_data[which(colnames(tree_data) == input$x_axis)])\n    y <- unlist(tree_data[which(colnames(tree_data) == input$y_axis)])\n    z <- tree_data$number_of_lineages\n    tt <- tree_data$Taxa\n\n    sp <- tree_data$Family\n    bm <- ape::corBrownian(value = 1, phy = phy_tree, form =~ sp)\n\n    a1 <- nlme::gls(x~z, correlation = bm)\n    a2 <- nlme::gls(y~z, correlation = bm)\n\n    xvals <- a1$residuals\n    yvals <- a2$residuals\n    to_plot <- cbind(xvals, yvals, z, tt)\n    colnames(to_plot) <- c(\"x\", \"y\", \"Size\", \"Taxa\")\n    to_plot <- as.data.frame(to_plot)\n    to_plot$x <- as.numeric(to_plot$x)\n    to_plot$y <- as.numeric(to_plot$y)\n    to_plot$Size <- as.numeric(to_plot$Size)\n\n    local_cor <- paste0(\"Pearson correlation = \", round(cor(xvals, yvals), 2))\n\n    if (input$coloring == \"Taxonomic group\") {\n      p1 <- ggplot(to_plot, aes(x = x, y = y, col = as.factor(Taxa))) +\n        geom_point(size = 2) +\n        scale_color_brewer(type = \"div\", palette = 3) +\n        stat_smooth(method = \"lm\", col = \"#416894\", fill = \"#416894\") +\n        xlab(paste(\"residual:\", input$x_axis)) +\n        ylab(paste(\"residual:\", input$y_axis)) +\n        theme_classic() +\n        ggtitle(local_cor) +\n        labs(col = \"Taxonomic\\nGroup\") +\n        theme(legend.text = element_text(size=14),\n              legend.title = element_text(size=16),\n              axis.title.x = element_text(size=16),\n              axis.title.y = element_text(size=16),\n              plot.title = element_text(size = 16, face = \"bold\")) +\n        guides(colour = guide_legend(override.aes = list(size=3)))\n    }\n    if (input$coloring == \"None\") {\n      p1 <- ggplot(to_plot, aes(x = x, y = y)) +\n        geom_point(col = \"#416894\", size = 2) +\n        stat_smooth(method = \"lm\", col = \"#416894\", fill = \"#416894\") +\n        xlab(paste(\"residual:\", input$x_axis)) +\n        ylab(paste(\"residual:\", input$y_axis)) +\n        theme_classic() +\n        ggtitle(local_cor) +\n        theme(legend.text = element_text(size=14),\n              legend.title = element_text(size=16),\n              axis.title.x = element_text(size=16),\n              axis.title.y = element_text(size=16),\n              plot.title = element_text(size = 16, face = \"bold\"))\n    }\n    if (input$coloring == \"Size\") {\n      p1 <- ggplot(to_plot, aes(x = x, y = y, col = Size)) +\n        geom_point(size = 2) +\n        scale_color_viridis_c(option = \"C\") +\n        stat_smooth(method = \"lm\", col = \"#416894\", fill = \"#416894\") +\n        xlab(paste(\"residual:\", input$x_axis)) +\n        ylab(paste(\"residual:\", input$y_axis)) +\n        theme_classic() +\n        ggtitle(local_cor) +\n        theme(legend.text = element_text(size=14),\n              legend.title = element_text(size=16),\n              axis.title.x = element_text(size=16),\n              axis.title.y = element_text(size=16),\n              plot.title = element_text(size = 16, face = \"bold\"))\n    }\n    p1\n  })\n\n  output$simPlot <- renderPlot({\n\n    x <- unlist(sim_data[which(colnames(sim_data) == input$x_axis)])\n    y <- unlist(sim_data[which(colnames(sim_data) == input$y_axis)])\n    used_model <- sim_data$model\n\n    to_plot <- cbind(x, y, used_model)\n    colnames(to_plot) <- c(\"x\", \"y\", \"model\")\n    to_plot <- as.data.frame(to_plot)\n    to_plot$x <- as.numeric(to_plot$x)\n    to_plot$y <- as.numeric(to_plot$y)\n    local_cor <- paste0(\"Pearson correlation = \", round(cor(x, y), 2))\n    ggplot(to_plot, aes(x = x, y = y, col = as.factor(model))) +\n      geom_point(size = 2) +\n      stat_smooth(method = \"lm\", col = \"#416894\", fill = \"#416894\") +\n      scale_color_brewer(type = \"div\", palette = 3) +\n      xlab(input$x_axis) +\n      ylab(input$y_axis) +\n      labs(col = \"Diversification\\nModel\") +\n      theme_classic() +\n      ggtitle(local_cor) +\n      theme(legend.text = element_text(size=14),\n            legend.title = element_text(size=16),\n            axis.title.x = element_text(size=16),\n            axis.title.y = element_text(size=16),\n            plot.title = element_text(size = 16, face = \"bold\")) +\n      guides(colour = guide_legend(override.aes = list(size=3)))\n  })\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)\n\n","type":"text"}]
